import pandas as pd
import random
import sqlite3
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InputFile
import os
from aiogram.types.web_app_info import WebAppInfo
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '7002609477:AAHnGqWiJ0IYvusj--Ujm0GUjU0kbQFRK4Y'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

contact_list = []
phones = {}
CHANNEL_ID = -1001449241974
welcome_text = "–î–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –ø—É—à–µ—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ."
subscribed_users = {}

class PromoCodeStates(StatesGroup):
    DELETE_PROMO_CODE = State()
    ADD_PROMO_CODE = State()

issued_promo_codes = {}
promo_codes = []

def create_excel_file(data):
    df = pd.DataFrame(data, columns=["id", "phone"])
    df.to_excel("users_data.xlsx", index=False)

def fetch_data_from_db():
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            phone TEXT
        )
    ''')
    
    cursor.execute("SELECT * FROM users")
    rows = cursor.fetchall()
    connection.close()
    return rows

@dp.message_handler(commands=['show'])
async def show_data(message: types.Message):
    data = fetch_data_from_db()
    create_excel_file(data)
    await message.answer_document(document=open("users_data.xlsx", 'rb'))

def create_connection():
    connection = None
    try:
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                phone TEXT
            )
        ''')
        connection.commit()
        print("Connection to SQLite DB successful")
    except sqlite3.Error as e:
        print(f"The error '{e}' occurred")
    return connection

def add_user(connection, user_id):
    try:
        cursor = connection.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (id)
            VALUES (?)
        ''', (user_id,))
        connection.commit()
        print("User added successfully")
    except sqlite3.Error as e:
        print(f"The error '{e}' occurred")

async def check_membership(user_id):
    subscribed = await is_user_subscribed(user_id)
    admin_or_owner = await is_user_admin_or_owner(user_id)
    return subscribed or admin_or_owner

async def is_user_subscribed(user_id):
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f'https://api.telegram.org/bot{API_TOKEN}/getChatMember',
            json={'chat_id': CHANNEL_ID, 'user_id': user_id}
        ) as response:
            data = await response.json()
            if response.status == 200:
                return data['result']['status'] == 'member'
            else:
                return False

async def is_user_admin_or_owner(user_id):
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f'https://api.telegram.org/bot{API_TOKEN}/getChatMember',
            json={'chat_id': CHANNEL_ID, 'user_id': user_id}
        ) as response:
            data = await response.json()
            if response.status == 200:
                status = data['result']['status']
                return status in ['creator', 'administrator']
            else:
                return False

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    print(f"User {user_id} started the bot.")

    connection = create_connection()
    add_user(connection, user_id)
    connection.close()

    is_subscribed = await check_membership(user_id)

    if is_subscribed:
        print(f"User {user_id} is subscribed.")
        keyboard = InlineKeyboardMarkup(row_width=2)
        subscribe_button = InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="t.me/off_street")
        get_code_button = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="get_code")
        web_app = InlineKeyboardButton('–û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó', web_app=WebAppInfo(url='https://offstreet.online/'))
        get_contact = InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", callback_data="get_contact")
        keyboard.add(subscribe_button, get_code_button, get_contact, web_app)
        photo_path = "main.jpeg"
        await message.answer_photo(
            photo=InputFile(os.path.abspath(photo_path)),
            caption=f"–° –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ OFF STREET, {user_name}!üî•\n- - - - - -\n{welcome_text}\n- - - - - -\n–ñ–º–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
            reply_markup=keyboard
        )
    else:
        print(f"User {user_id} is not subscribed.")
        keyboard = InlineKeyboardMarkup()
        subscribe_button = InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="t.me/off_street")
        keyboard.add(subscribe_button)
        photo_path = "main.jpeg"
        await message.answer_photo(
            photo=InputFile(os.path.abspath(photo_path)),
            caption=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OFF STREET, {user_name}!üî•\n- - - - - -\n{welcome_text}\n- - - - - -\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=keyboard
        )

@dp.callback_query_handler(lambda query: query.data == 'get_contact')
async def get_contact(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True))
    await bot.send_message(user_id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–û–î–ï–õ–ò–¢–¨–°–Ø –ö–û–ù–¢–ê–ö–¢–û–ú¬ª, –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç –Ω–∞—Å –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ø–æ–¥–∞—Ä–æ–∫!üëá', reply_markup=markup)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contact_received(message: types.Message):
    user_id = message.from_user.id
    phone_number = message.contact.phone_number

    connection = create_connection()
    try:
        cursor = connection.cursor()
        cursor.execute('''
            UPDATE users
            SET phone = ?
            WHERE id = ?
        ''', (phone_number, user_id))
        connection.commit()
        print(f"Phone number added for user {user_id}")
        await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except sqlite3.Error as e:
        print(f"The error '{e}' occurred")
    connection.close()

@dp.message_handler(commands=['post'])
async def send_message_to_all(message: types.Message):
    text_to_send = message.text.replace("/post", "").strip()
    connection = create_connection()

    try:
        cursor = connection.cursor()
        cursor.execute('SELECT id FROM users')
        user_ids = cursor.fetchall()

        for user_id in user_ids:
            try:
                await bot.send_message(user_id[0], text_to_send)
                print(f"Message sent to user {user_id[0]}")
            except Exception as e:
                print(f"Failed to send message to user {user_id[0]}. Error: {e}")

        print("Message sent to all users")
    except sqlite3.Error as e:
        print(f"The error '{e}' occurred")
    connection.close()

@dp.message_handler(commands=['rm'])
async def change_welcome_text(message: types.Message):
    global welcome_text
    allowed_users = [5429082466, 713476634, 832507232]
    if message.from_user.id in allowed_users:
        new_text = message.text.split('/rm', 1)[-1].strip()
        welcome_text = new_text
        print("–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω:", welcome_text)
        await message.answer("–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message_handler(commands=['code'])
async def code(message: types.Message):
    allowed_users = [5429082466, 713476634, 832507232]
    user_id = message.from_user.id
    if user_id in allowed_users:
        if promo_codes:
            promo_codes_list = "\n".join([f"{index + 1}. {code}" for index, code in enumerate(promo_codes)])
            await message.answer(
                f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n{promo_codes_list}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=InlineKeyboardMarkup().row(
                    InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_code"),
                    InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="delete_code")
                )
            )
        else:
            await message.answer("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç.\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                                 reply_markup=InlineKeyboardMarkup().row(
                                     InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="add_code")
                                 ))
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

def add_promo_code(code):
    promo_codes.append(code)

@dp.callback_query_handler(lambda c: c.data == 'get_code')
async def get_code(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.first_name
    if promo_codes:
        if user_id in issued_promo_codes:
            await callback_query.message.answer(f"–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: {issued_promo_codes[user_id]}")
        else:
            random_promo_code = random.choice(promo_codes)
            issued_promo_codes[user_id] = random_promo_code
            await callback_query.message.answer(f"–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: {random_promo_code}")
    else:
        await callback_query.message.answer("–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç.")

@dp.message_handler(content_types=['new_chat_members'])
async def on_new_chat_members(message: types.Message):
    for user in message.new_chat_members:
        if user.id == bot.id:
            subscribed_users[message.chat.id] = True
            logging.info(f"–ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–±–ª–∏–∫ {message.chat.title}")

@dp.callback_query_handler(lambda c: c.data == 'delete_code')
async def delete_code(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é):")
    await PromoCodeStates.DELETE_PROMO_CODE.set()

@dp.message_handler(state=PromoCodeStates.DELETE_PROMO_CODE)
async def process_delete_promo_code(message: types.Message, state: FSMContext):
    indexes_str = message.text
    indexes = []
    try:
        indexes = [int(index.strip()) for index in indexes_str.replace(',', ' ').split()]
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å—ã —á–∏—Å–ª–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–æ–º –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π.")
        return

    if any(index < 1 or index > len(promo_codes) for index in indexes):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    deleted_promo_codes = [promo_codes.pop(index - 1) for index in sorted(indexes, reverse=True)]
    await state.finish()

    deleted_promo_codes_str = '\n'.join(deleted_promo_codes)
    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã:\n{deleted_promo_codes_str}")

@dp.callback_query_handler(lambda c: c.data == 'add_code')
async def add_code(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:")
    await PromoCodeStates.ADD_PROMO_CODE.set()

@dp.message_handler(state=PromoCodeStates.ADD_PROMO_CODE)
async def process_add_promo_code(message: types.Message, state: FSMContext):
    new_code = message.text
    add_promo_code(new_code)
    await state.finish()
    await message.answer("–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

if __name__ == '__main__':
    executor.start_polling(dp)
